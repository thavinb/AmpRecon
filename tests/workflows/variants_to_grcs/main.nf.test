nextflow_workflow {

    name "Test VARIANTS_TO_GRCS Subworkflow"
    script "workflows/variants_to_grcs/main.nf"
    workflow "VARIANTS_TO_GRCS"

    test("Test: Test GRC Creation, Should give the same result with no error.") {
        when {
            params {
                batch_id         = "test"
            }
            workflow {
                def lanelet_path = "${workDir}/lanelet_vcf_manifest.csv"
                def mnf_path     = "${workDir}/fq_mnf.tsv"
                def fastq_path   = "${baseDir}/tests/data/fastq"
                def vcf_path     = "${moduleTestDir}/data/vcfs"
                def mnf          = WorkflowUtils.makeManifest("${mnf_path}", 
                    ["sample_id", "primer_panel", "fastq1_path", "fastq2_path", "meta"],
                    (1..30).collectMany { i ->
                        def sampleName = String.format("sample%02d", i)
                        ["GRC1", "GRC2", "Spec"].collect { panel ->
                            [
                                sample_id   : "${sampleName}",
                                primer_panel: "PFA_${panel}",
                                fastq1_path : "${fastq_path}/${sampleName}.${panel.toLowerCase()}_1.fastq",
                                fastq2_path : "${fastq_path}/${sampleName}.${panel.toLowerCase()}_2.fastq",
                                meta        : "metadata of ${sampleName}"
                            ]
                        }
                    }
                )
                def lanelet      = WorkflowUtils.makeManifest("${lanelet_path}", 
                    ["ID", "vcf_path"],
                    (1..30).collectMany { i ->
                        def sampleName = String.format("sample%02d", i)
                        ["GRC1", "GRC2", "Spec"].collect { panel ->
                            [
                                ID      : "${sampleName}",
                                vcf_path: "${vcf_path}/${sampleName}.${panel.toLowerCase()}.vcf.gz"
                            ]
                        }
                    }, ","
                )
                """
                input[0] = file("${mnf}")
                input[1] = file("${lanelet}")
                // chrom_key_file
                input[2] = file("${moduleTestDir}/data/chromKey.txt")
                // kelch_reference_file
                input[3] = file("${moduleTestDir}/data/kelchReference.txt")
                // codon_key_file
                input[4] = file("${moduleTestDir}/data/codonKey.txt")
                // drl_information_file
                input[5] = file("${moduleTestDir}/data/DRLinfo.txt")

                """
            }
        }

        then {
            assert workflow.success
            assert workflow.out.grc
            assert workflow.out.grc.size() == 1
			// md5 of current worflow
            def grc = workflow.out.grc.get(0)
            assert path(grc).md5 == "3b93063657e8d0a04a4f789eeb2469f5"

            // md5 of 148 essential columns from original pipeline
			def subset_grc = WorkflowUtils.subsetColumns(grc, "${workDir}/subset_grc.tsv")            
            assert path(subset_grc).md5 == "9a94336e10ab0ccce8c64b54037fc0ad"
            
        }

    }

}
